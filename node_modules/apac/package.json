{
  "name": "apac",
  "description": "Amazon Product Advertising API Client for Node",
  "version": "1.0.0",
  "author": {
    "name": "Dustin McQuay",
    "email": "dmcquay@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dmcquay/node-apac.git"
  },
  "bugs": {
    "url": "http://github.com/dmcquay/node-apac/issues"
  },
  "directories": {
    "lib": "./lib/"
  },
  "main": "./lib/apac",
  "dependencies": {
    "xml2js": ">=0.2.3",
    "request": ">=2.12.0"
  },
  "devDependencies": {
    "vows": ">=0.5.0"
  },
  "engines": {
    "node": ">=0.1.97"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/dmcquay/node-apac/raw/master/LICENSE"
    }
  ],
  "keywords": [
    "Amazon Product Advertising API",
    "AWS"
  ],
  "readme": "# node-apac - Node.js client for the Amazon Product Advertising API.\n\napac (Amazon Product Advertising Client) will allow you to access the Amazon Product Advertising API from Node.js. It supports the newly required Request Signatures which can be a bit tedious to generate on your own. [Learn more about the Amazon Product Advertising API](https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html).\n\nnode-apac is just a thin wrapper around Amazon's API. The only intent is to take care of request signatures, performing the HTTP requests, processing the responses and parsing the XML. You should be able to run any operation becuase the operation and all parameters are passed directly to the execute method just as they will be passed to Amazon. The result is that you feel likely you're working directly with the API, but you don't have to worry about some of the more teadious tasks.\n\n## Changelog\n**v1.0.0** \nErrors are now returned as the first parameter of the callback function, instead of being processed by a seperate OnError function.\nNote: This will break backwards compatibility with previous implementations where errors are processed by a sepearte funciton. Because of this, **version 1.0.0 will not be uploaded to NPM yet**, until more core features are added. Those who would like the new error processing implementation can get the module by cloning GitHub.\n\n## Installation\n\nInstall using npm:\n```bash\n$ npm install apac@latest\n```\n\nIf you try to install without \"@latest\", it will try to install the most recent stable\nversion, but there is no stable version yet. So for now you must specify latest.\n\n## Quick Start\n\nHere's a quick example:\n```javascript\nvar util = require('util'),\n    OperationHelper = require('apac').OperationHelper;\n\nvar opHelper = new OperationHelper({\n    awsId:     '[YOUR AWS ID HERE]',\n    awsSecret: '[YOUR AWS SECRET HERE]',\n    assocId:   '[YOUR ASSOCIATE TAG HERE]'\n    // xml2jsOptions: an extra, optional, parameter for if you want to pass additional options for the xml2js module. (see https://github.com/Leonidas-from-XIV/node-xml2js#options)\n});\n\n\n// execute(operation, params, callback)\n// operation: select from http://docs.aws.amazon.com/AWSECommerceService/latest/DG/SummaryofA2SOperations.html\n// params: parameters for operation (optional)\n// callback(err, parsed, raw): callback function handling results. err = potential errors raised from xml2js.parseString() or http.request(). parsed = xml2js parsed response. raw = raw xml response.\n\nopHelper.execute('ItemSearch', {\n  'SearchIndex': 'Books',\n  'Keywords': 'harry potter',\n  'ResponseGroup': 'ItemAttributes,Offers'\n}, function(err, results) { // you can add a third parameter for the raw xml response, \"results\" here are currently parsed using xml2js\n\tconsole.log(results);\n});\n\n// output:\n// { ItemSearchResponse: \n//    { '$': { xmlns: 'http://webservices.amazon.com/AWSECommerceService/2011-08-01' },\n//      OperationRequest: [ [Object] ],\n//      Items: [ [Object] ] } }\n```\n\nResults are returned as a JSON object (XML results parsed using xml2js -- thanks pierrel).\n\nError Handling:\nNote that there are three possible types of errors that can arise from opHelper.execute(). \n1: xml2js.parseString() raised an error. \n2: http.request to Amazon raised an error. (ex. a 404 error) \n3: An error returned by Amazon after successfully sending the request. (ex. You provided invalid AWS keys.)\n\nBoth error 1 and 2 are returned as the first parameter to the callback funciton in v1.0.0, and error 3 would be in \"results\" as you successfully recieved a response from Amazon.\n\n## API Documentation\n\nBecause we don't define any specific operations, we also don't document them. What a waste\nwhen you can find them all here:\n[API Reference](http://docs.amazonwebservices.com/AWSECommerceService/latest/DG/index.html?ProgrammingGuide.html)\n\n## License\n\nCopyright (c) 2010 Dustin McQuay. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/dmcquay/node-apac",
  "_id": "apac@1.0.0",
  "_shasum": "42d631d1d105ebdbcb3c5bd465759b6d15c4e224",
  "_from": "apac@latest",
  "_resolved": "https://registry.npmjs.org/apac/-/apac-1.0.0.tgz"
}
